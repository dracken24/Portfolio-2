{
  "info": {
    "name": "Portfolio API",
    "description": "Collection compl√®te pour l'API Portfolio - Documentation compl√®te des endpoints pour la gestion des projets et l'authentification",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "portfolio-api-collection",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string",
      "description": "URL de base de l'API"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "Token JWT pour l'authentification"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "üîê Authentification",
      "description": "Endpoints pour l'authentification des utilisateurs administrateurs",
      "item": [
        {
          "name": "Login Admin",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"motdepasse123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Authentifie un utilisateur administrateur et retourne un token JWT"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test de la r√©ponse de login",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('token');",
                  "    pm.expect(response.token).to.be.a('string');",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    pm.expect(response.user).to.have.property('role');",
                  "});",
                  "",
                  "// Sauvegarde automatique du token",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.token);",
                  "    console.log('Token sauvegard√©:', response.token);",
                  "}"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "üìÅ Projets",
      "description": "Endpoints CRUD pour la gestion des projets",
      "item": [
        {
          "name": "GET - R√©cup√©rer tous les projets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["projects"]
            },
            "description": "R√©cup√®re tous les projets de la base de donn√©es (pas d'authentification requise)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success property\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response has data array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "POST - Cr√©er un nouveau projet",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Nouveau Projet Portfolio\",\n  \"description\": \"Un projet moderne d√©velopp√© avec les derni√®res technologies web\",\n  \"technologies\": \"Next.js, React, TypeScript, Material-UI, Prisma, PostgreSQL\",\n  \"status\": \"En cours\",\n  \"url\": \"https://github.com/user/portfolio-project\",\n  \"imageUrl\": \"/imgs/links/portfolio-screenshot.png\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["projects"]
            },
            "description": "Cr√©e un nouveau projet dans la base de donn√©es (authentification requise)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has success property\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response has project data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('name');",
                  "    pm.expect(response.data).to.have.property('description');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "GET - R√©cup√©rer un projet par ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects/1",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "1"]
            },
            "description": "R√©cup√®re un projet sp√©cifique par son ID (pas d'authentification requise)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has project data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data.id).to.equal(1);",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "PUT - Mettre √† jour un projet",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Projet Portfolio Modifi√©\",\n  \"description\": \"Description mise √† jour du projet portfolio avec nouvelles fonctionnalit√©s\",\n  \"technologies\": \"Next.js, React, TypeScript, Material-UI, Prisma, PostgreSQL, Docker\",\n  \"status\": \"Termin√©\",\n  \"url\": \"https://github.com/user/portfolio-project-updated\",\n  \"imageUrl\": \"/imgs/links/portfolio-final.png\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/projects/1",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "1"]
            },
            "description": "Met √† jour un projet existant (authentification requise)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated project data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('name');",
                  "    pm.expect(response.data.name).to.equal(\"Projet Portfolio Modifi√©\");",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "DELETE - Supprimer un projet",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects/1",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "1"]
            },
            "description": "Supprime un projet de la base de donn√©es (authentification requise)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "üß™ Tests d'erreur",
      "description": "Tests pour v√©rifier la gestion des erreurs",
      "item": [
        {
          "name": "Login - Identifiants invalides",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Test de login avec des identifiants invalides"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('incorrect');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Cr√©er projet - Donn√©es manquantes",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"technologies\": \"\",\n  \"status\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["projects"]
            },
            "description": "Test de cr√©ation de projet avec des donn√©es manquantes"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Projet inexistant",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects/999",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "999"]
            },
            "description": "Test de r√©cup√©ration d'un projet inexistant"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.include('trouv√©');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global pour la collection",
          "console.log('Collection Portfolio API - Pr√©requ√™te');"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Tests globaux pour la collection",
          "pm.test(\"Response time is less than 2000ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test(\"Response has valid JSON\", function () {",
          "    pm.response.to.be.json;",
          "});"
        ]
      }
    }
  ]
}
